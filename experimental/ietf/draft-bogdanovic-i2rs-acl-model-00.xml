<?xml version="1.0" encoding="UTF-8"?>

<!-- This is built from a template for a generic Internet Draft. Suggestions for
     improvement welcome - write to Brian Carpenter, brian.e.carpenter @ gmail.com -->

<!-- This can be converted using the Web service at http://xml.resource.org/experimental.html
     (which supports the latest, sometimes undocumented and under-tested, features.) -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [


]>


<?rfc toc="yes"?>            <!-- You want a table of contents -->
<?rfc symrefs="yes"?>        <!-- Use symbolic labels for references -->
<?rfc sortrefs="yes"?>       <!-- This sorts the references -->
<?rfc iprnotified="no" ?>    <!-- Change to "yes" if someone has disclosed IPR for the draft -->
<?rfc subcompact="no" ?>
<?rfc compact="yes"?>


<!-- This defines the specific filename and version number of your draft (and inserts the appropriate IETF boilerplate -->
<rfc ipr="trust200902" docName="draft-bogdanovic-i2rs-acl-model-00" category="info">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
  <?rfc toc="yes" ?>
  <?rfc compact="yes" ?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes"?>
  <?rfc iprnotified="no" ?>
  <?rfc strict="yes" ?>


<front>
  <title abbrev="I2RS ACL YANG model">ACL YANG model</title>
  <author fullname="Dana Blair" initials="D." surname="Blair">
    <organization>Cisco Systems</organization>
    <address>
      <email>dblair@cisco.com</email>
    </address>
  </author>
  <author fullname="Dean Bogdanovic" initials="D." surname="Bogdanovic">
    <organization>Juniper Networks</organization>
    <address>
      <email>deanb@juniper.net</email>
    </address>
  </author>
  <author fullname="Kiran Agrahara Sreenivasa" initials="K." surname="Sreenivasa">
    <organization>Brocade Communications System</organization>
    <address>
      <email>kkoushik@brocade.com</email>
    </address>
  </author>

  <date day="4" month="June" year="2014" />

  <area>Routing Area</area>
  <workgroup>I2RS WG</workgroup>

  <abstract>
    <t>This document describes information and data model of Access Control List (ACL) basic building blocks.
    </t>
  </abstract>
</front>

<middle>
  <section anchor="intro" title="Introduction">
    <t>
      Access Control List (ACL) is one of the basic  elements to configure device forwarding behavior. It is used in many networking concepts (Policy Based Routing, Firewalls, etc) and as such construct, it is very important that model can be easily reused between vendors and between different applications.  This document defines a YANG <xref target="RFC6020"/> data model for ACL management.
    </t>
  </section> <!-- intro -->

  <section anchor="problem" title="Problem Statement">
    <t>Today each networking vendor has it own data model for supported functionalities on their devices. This requires network management systems (NMS) to have very detailed undertanding of each vendor data model to provision devices. By providing a unified model, it simplifies development of NMS and the provisioning process in different vendor environments.
    </t>
  </section> <!-- problem -->

  <section anchor="designandinfo" title="Design and Information Model">
    <t>Although different vendors have different ACL data models, general model is same. An ACL evaluates the contents of packets transiting the network element from a source to a destination. ACLs evaluates every packet, including fragmented packet based on the condition. 

Before creating an ACL, it has to be determined what is wanted to accomplish with it and how to use its match conditions and actions to achieve desired goal. Also, it is important to underastand how packets are matched and the default action of the resulting ACL.</t>

<t>Following conditions are taken into the account when designing an ACL:</t>
<t>Purpose of ACL - for example, to limit traffic to certain protocols, IP source or destination addresses, or data rates, or to prevent denial-of-service (DoS) attacks.</t>
<t>Appropriate match conditions - The packet header fields to matchâ€”for example, IP header fields (such as source and destination IP addresses, protocols, and IP options), TCP header fields (such as source and destination ports and flags), and ICMP header fields (such as ICMP packet type and code).</t>

<t>Action to take if a match occurs - for example, accept, discard, count or mark</t>

<t>This draft tries to address the commonalities between all vendors and create a common model, which can be augmented with proprietary models. The base model is very simple and with this design we hope to achieve needed flexibility for each vendor to extend the base model.</t>
  </section> <!-- designandinfo -->

  <section anchor="aclmodules" title="ACL Modules">
    <t>There are three YANG modules in the model. The first module, "ietf-acl", defines generic ACL aspects which are common to all ACLs regardless of their type or vendor. In effect, the module can be viewed as providing a generic ACL "superclass". It imports the packet-headers.yang into the match container. The packet headers can be extended with different types and fragments.
    </t>
    <figure>
      <artwork>
	module: ietf-acl
	   +--rw access-list
	      +--rw acl-name?              string
	      +--rw access-list-entries* [rule-name]
	         +--rw rule-name    string
	         +--rw matches
	         |  +--rw destination-ipv4-address?   inet:ipv4-address
	         |  +--rw source-ipv4-address?        inet:ipv4-address
	         |  +--rw ipv4-dscp?                  inet:dscp
	         |  +--rw destination-address?        inet:ipv6-address
	         |  +--rw source-address?             inet:ipv6-address
	         |  +--rw flow-label?                 inet:ipv6-flow-label
	         |  +--rw ipv6-dscp?                  inet:dscp
	         |  +--rw destination-prefix?         inet:ip-prefix
	         |  +--rw source-prefix?              inet:ip-prefix
	         |  +--rw input-interface?            string
	         +--rw actions
	            +--rw (packet-handling)?
	               +--:(deny)
	               |  +--rw deny?     empty
	               +--:(permit)
	                  +--rw permit?   empty
      </artwork>
    </figure>
    <t>Two other module "newco-acl" is example of company proprietary model, that augments the ietf-acl module with definitions that are specific to match criteria and company proprietary extensions to match and action criteria. The model below is shown just as an example and it is expected from vendors to create their own propietary models, based on the example below.
    </t>
    <figure>
      <artwork>
	module: newco-acl
	augment /ietf-acl:access-list/ietf-acl:access-list-entries/ietf-acl:matches:
	   +--rw (protocol_payload_choice)?
	      +--:(protocol_payload)
	         +--rw protocol_payload* [value_keyword]
	            +--rw value_keyword    enumeration
	augment /ietf-acl:access-list/ietf-acl:access-list-entries/ietf-acl:actions:
	   +--rw (action)?
	      +--:(count)
	      |  +--rw count?                   string
	      +--:(policer)
	      |  +--rw policer?                 string
	      +--:(hiearchical-policer)
	         +--rw hierarchitacl-policer?   string
      </artwork>
    </figure>
  </section> <!-- aclmodules -->

  <section anchor="datamodel" title="ACL Data Model">
    <t>
    </t>
  </section> <!-- datamodel -->

  <section anchor="yangmodel" title="ACL YANG Model">
    <t>
      Here is the YANG module for ietf-acl.
    </t>
    <figure>
      <artwork>
	module ietf-acl {
	    yang-version 1;
	
	    namespace "urn:ietf:params:xml:ns:yang:ietf-acl";
	
	    prefix ietf-acl;
	    
	    import packet-fields {
	        prefix "packet-fields";
	    }
	
	    revision 2014-05-20{
	        description "creating base model for i2rs";
	    }
	
	    container access-list {
	        description "
			     An access list (acl) is an ordered list of access list
			     entries (ace). Each ace has a sequence number to define
			     the order, list of match criteria, and a list of actions.
			     Since there are several kinds of acls implementeded
			     with different attributes for each and different for
			     each vendor, this model accomodates customizing acls
			     for each kind and for each vendor.
			     ";
		leaf acl-name {
		    description "name of access-list";
		    type string;
		}
	
		list access-list-entries {
	            key rule-name;
		    ordered-by user;
		      leaf rule-name {
	                description "Entry name";
	                type string;
	              }
	
		    container matches {
		        description "Define match criteria";
		       	uses packet-fields:ietf-ipv4-header-fields;      
		       	uses packet-fields:ietf-ipv6-header-fields;      
		       	uses packet-fields:ietf-eth-header-fields;
			uses packet-fields:metadata;
		    }
	
		    container actions {
	       	        description "Define action criteria";
		    	choice packet-handling {
			    default deny;
			    case deny {
			        leaf deny {
				    type empty;
				}
			    }
			    case permit {
			        leaf permit {
				    type empty;
				}
			    }
			}      
	            }
		}
	    }
	}
      </artwork>
    </figure>
    <t>Here is the model for packet headers</t>
    <figure>
      <artwork>
	module packet-fields {
	    yang-version 1;
	
	    namespace "urn:ietf:params:xml:ns:yang:packet-fields";
	
	    prefix packet-fields;
	
	    import ietf-inet-types {
	        prefix "inet";
	    }
			    
	    revision 2014-04-25 {
	        description "First revision";
	    }
	
	    type prefix;
	    type prefix-v4;
	    type prefix-v6;
	
	    grouping ietf-tcp-header-fields {
	        description "all tcp header fields";
	
		container source-port-range {
		     description "inclusive range of source ports";
		     leaf lower-port {
		         type inet:port-number;
		     }
		     leaf uppoer-port {
		         type inet:port-number;
		     }
		}	
	    }
	
	    grouping ietf-ipv4-header-fields {
	        description "all fields in IPv4 header";
	
		leaf destination-ipv4-address {
		    type inet:ipv4-address;
		}
	
		leaf source-ipv4-address {
		    type inet:ipv4-address;
		}
	
		leaf ipv4-dscp {
		    type inet:dscp;
		}
	
	    }
	
	    grouping ietf-ipv6-header-fields {
	        description "all fields in IPv6 header";
	
		leaf destination-address {
		    type inet:ipv6-address;
		}
	
		leaf source-address {
		    type inet:ipv6-address;
		}
	
		leaf flow-label {
		    type inet:ipv6-flow-label;
		}
	
		leaf ipv6-dscp {
		    type inet:dscp;
		}
	    }
	
	    grouping ietf-eth-header-fields {
	        description "all fields in ethernet header";
	
	
	    }
	
	    grouping metadata {
	        description "Fields associated with a packet but not in the header";
		leaf destination-prefix {
		     description "Prefix associated with destination address. Prefix
		     		  is a meta data field because it's not fully
				  specified in the packet header even though a
				  address can be part of prefix";
		     type inet:ip-prefix;		   	    
		}
	
		leaf source-prefix {
		     description "Prefix associated with destination address. Prefix
		     		  is a meta data field because it's not fully
				  specified in the packet header even though a
				  address can be part of prefix";
		     type inet:ip-prefix;		   	    
		}
	
		leaf input-interface {
		     description "Packet was received on this interface";
		     type string;
		}
	    }
	}
      </artwork>
    </figure>
    <t>Here is the newco YANG model, that augments the base model</t>
    <figure>
      <artwork>
	module newco-acl {
	    yang-version 1;
	
	    namespace "urn:newco:params:xml:ns:yang:newco-acl";
	
	    prefix newco-acl;
	
	    import ietf-acl {
	      prefix "ietf-acl";
	    }
	
	    revision 2014-05-21{
	      description "creating newo proprietary extensions to ietf-acl model";
	    }
	
	    augment "/ietf-acl:access-list/ietf-acl:access-list-entries/ietf-acl:matches" {
	      description "Newco proprietry simple filter matches";
	         choice protocol_payload_choice {
	           list protocol_payload {
	             key value_keyword;
	             ordered-by user;
	             description "Match protocol payload";
	             uses match_simple_payload_protocol_value;
	           }
	      }   
	    }
	
	    augment "/ietf-acl:access-list/ietf-acl:access-list-entries/ietf-acl:actions" {
	      description "Newco proprietary simple filter actions";
	      choice action {
	         case count {
	            description "Count the packet in the named counter";
		       leaf count {
	                  type string;
		       }
	            }
	         case policer {
		   description "Name of policer to use to rate-limit traffic";
	            leaf policer {
		       type string;
		    }
		 }
		 case hiearchical-policer {
		   description "Name of hierarchical policer to use to rate-limit traffic";
		   leaf hierarchitacl-policer{
	       	      type string;
		   }
		 }
	      }
	    }
	
	  grouping match_simple_payload_protocol_value {
	     leaf value_keyword {
	       description "(null)";
	       type enumeration {
	         enum icmp {
	           description "Internet Control Message Protocol";
	         }
	         enum icmp6 {
	           description "Internet Control Message Protocol Version 6";
	         }
	         enum range {
	           description "Range of values";
	         }
	       }
	     }
	   }
	}
      </artwork>
    </figure>
  </section> <!-- yangmodel -->

  <section anchor="security" title="Security Considerations">
    <t>
    </t>
  </section> <!-- security -->

  <section anchor="iana" title="IANA Considerations">
    <t>This document requests no action by IANA. </t>
  </section> <!-- iana -->

  <section anchor="ack" title="Acknowledgements">
    <t>
    </t>
  </section> <!-- ack -->

  <section anchor ="changes" title="Change log [RFC Editor: Please remove]">
    <t>
    </t>
  </section> <!-- changes -->

</middle>

<back>

  <references title="References">
    <?rfc include='reference.RFC.6020'?>

  </references>

</back>
</rfc>

