<?xml version="1.0" encoding="UTF-8"?>

<!-- This is built from a template for a generic Internet Draft. Suggestions for
     improvement welcome - write to Brian Carpenter, brian.e.carpenter @ gmail.com -->

<!-- This can be converted using the Web service at http://xml.resource.org/experimental.html
     (which supports the latest, sometimes undocumented and under-tested, features.) -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [


]>


<?rfc toc="yes"?>            <!-- You want a table of contents -->
<?rfc symrefs="yes"?>        <!-- Use symbolic labels for references -->
<?rfc sortrefs="yes"?>       <!-- This sorts the references -->
<?rfc iprnotified="no" ?>    <!-- Change to "yes" if someone has disclosed IPR for the draft -->
<?rfc compact="yes"?>


<!-- This defines the specific filename and version number of your draft (and inserts the appropriate IETF boilerplate -->
<rfc ipr="trust200902" docName="draft-bogdanovic-netmod-yang-model-classification-02" category="info"  >


<front>
  <title abbrev="YANG model classification">YANG model classification</title>

  <author fullname="Dean Bogdanovic" initials="D." surname="Bogdanovic">
    <organization>Juniper Networks</organization>
    <address>
      <email>deanb@juniper.net</email>
    </address>
  </author>

    <author fullname="Benoit Claise" initials="B." surname="Claise">
    <organization>Cisco Systmes, Inc.</organization>
    <address>
      <email>bclaise@cisco.com</email>
    </address>
  </author>

  <author fullname="Carl Moberg" initials="C." surname="Moberg">
    <organization>Cisco Systmes, Inc.</organization>
    <address>
      <email>camoberg@cisco.com</email>
    </address>
  </author>

  <date day="12" month="March" year="2015" />

  <area>Operations and Management</area>
  <workgroup>NETMOD</workgroup>


  <abstract>
    <t>YANG became de facto standard language for data modeling in the industry.
   More and more groups uses YANG to create protocol and service models, both for
   configuration and operational models.  Currently there is a lack of consistent
   terminology to categorize those models. A consistent terminology would help models
   categorization, assist in the analysis the YANG data modeling effort in the IETF
   and in the industry, and facilitate the YANG-related discussions between different
   groups.</t>
  </abstract>
</front>

<middle>
  <section anchor="intro" title="Introduction">
    <t>YANG <xref target="RFC6020"/> became de-facto standard language for data modeling in the
	industry. Not only at the IETF, but also in multiple Standard Development Organizations,
	different consortia, ad hoc groups, and OSP. Therefore, many YANG models are being developed
	and published. Today, there is no classification of models, there are no clear guidelines on
	how to layer models on each other, or how to classify existing or new models.
	With this document, the authors propose a new way to classify the YANG model, along with
    a taxonomy.</t>

   <t>Acknowledging that the YANG became the de-facto standard language for data modeling,
   the Internet Engineering Steering Group (IESG) has been encouraging the working groups to use
   the NETCONF <xref target="RFC6241"/> and YANG standards for configuration, especially in new
   charters <xref target="Writable-MIB-Module-IESG-Statement"/>.</t>

   <t>YANG Models can be classified according to two dimensions: based on the layer
     in the hierarchy of models, and based on the model type. Those two categories
     are covered in the next two sections.</t>
  </section> <!-- intro -->


  <section anchor="firstdimension" title="First Dimension: Network YANG Data Model Layering">
    <t>When developing models, there are two approaches possible, top down and
	   bottom up. Top down approach is driven by business requirements and bottom
	   up is driven by technological ones.
    </t>

	  <t>There are no hard requirements on how to create models, but it would be
	   useful to have a classification and how to create models that can be easily
     reused, as with this time and energy will be saved in future development.
     We should stimulate both development styles, bottom up and top down, as
     each has its benefits and groups to which a certain style will be more
     appealing than the other.
    </t>
	  <t>For layering purposes, we can classify data models into two layers:</t>
	   <t>
       <list style="symbols">
		     <t>Network Service YANG Model: an abstract view, in YANG, of a
             service deployed on one or multiple network elements.</t>
		     <t>Network Element YANG Model: describe the configuration parameters,
           in YANG, of a specific device technology or feature.</t>
	      </list>
      </t>

	   <t>Figure 1 displays example YANG models at different layers. By layering
       the models, it is easier to achieve reusability of existing lower layer
       models in higher level models and preventing duplication of same features
       modeled in different layers. When developing models per layers, it allows
       creating very focused groups in specific areas. As an example, creating
       protocol data definitions network equipment YANG data models should
       involve people that have intimate experience of implemention details. On
       the other hand, network service models are best developed by people
       experienced in network operations. Same network service, can be
       implemented and modeled using  different Network Element YANG models.
	  </t>

	<figure align="center">
	   <artwork align="center"><![CDATA[

                    +-----------------------+
                    |                       |
                    |        OSS/BSS        |
                    |                       |
                    +-----------------------+

	Network Service YANG data models -------------------------------

	     +------------+      +-------------+      +-------------+
	     |            |      |             |      |             |
	     |  - VPWS    |      |   - VPLS    |      |    L3VPN    |
	     |  - L2VPN   |      |   - L2VPN   |      |             |
	     |            |      |             |      |             |
	     +------------+      +-------------+      +-------------+


	Network Element YANG data models ---------------------------------

  +------------+    +------------+   +--------------+  +-----------+
  |            |    |            |   |              |  |           |
  |     MPLS   |    |    BGP     |   |  Interface   |  |  Routing  |
  |            |    |            |   |              |  |           |
  +------------+    +------------+   +--------------+  +-----------+

                       Fig. 1 YANG Model layers

	]]></artwork>
		</figure> <!-- YANG model layers -->

  <section anchor="networkService" title="Network Service YANG Data Models">
        <t>Network Service YANG models are created by network operators to contain
        the characteristics of a service, as discussed with their customers. That is,
        it does not provide details for configuring network elements or protocols.
        A separate process is responsible for mapping this Network Service Model onto
        the Network Element YANG Models, depending on how the network operator chooses
        to realize the service.</t>

	    <t>For example, http://datatracker.ietf.org/doc/draft-l3vpn-service-yang/
        provides an abstracted view of the Layer 3 IP VPN service configuration
        components. It will be up to an orchestrator to take this as an
        input and use specific configurations models on the network element layer
        to configure the different network elements to deliver the service.</t>

	     <t>Network Service YANG models can be developed in multiple ways.
         Building them monolithic from vendor models or by combining one or more
         service components into an end to end service data model. It specifies
         complete service that is provided by the network operator.
         Building monolithic network service model has an advantage of doing it
         fast, but at the expense of flexibility of updating the service later
         or changing equipment vendors. Such an end to end service can be
         VPLS/VPWS, L2VPN, IPsec, etc. If we take into example VPLS L2VPN service,
         it can be built as a single network service model or it can be built from
         several service components. VPWS L2VPN service can be built on top of
         MPLS or IP network core. When building such a network service model,
         network variations have to be taken into the account and by creating
         service components modle, such as MPLS, BGP service component models,
         it is easier to build a network service model, such as VPWS L2VPN.</t>
      </section> <!-- networkService -->

   <section anchor="networkElement" title="Network Element YANG Data models">
        <t>This is base model for all higher models. It fully describes
          a protocol or technology, such as OSPF <xref target='I-D.ietf-ospf-yang'/>,
          ISIS <xref target='I-D.ietf-isis-yang-isis-cfg'/> or feature,
          such as the access control list <xref target='I-D.ietf-netmod-acl-model'/>.
        </t>
   </section> <!-- protocol/feature YANG data models -->
 </section> <!-- firstdimension -->

 <section title="Second Dimension: Model Type">
	  <t>At very high level, models can be divided into proprietary and standard.
      Each vendor, consortium, open source project can publish their models and
      those are considered proprietary models. When an SDO, such as IETF or IEEE,
      publishes an accepted model document, then this is a standard model. There
      are use cases where a consortium has published work which de facto became
      standard, such as Linux kernel, but for the clarity in this document,
      authors are making a separation between models based on the above
      description.
    </t>
	  <t><list style="symbol">

		<t>Standard YANG Model: YANG model defined by an Standard Development
        organization (SDO), e.g. IETF, IEEE. </t>

		<t>Standard Extension YANG Model: YANG Model that describes a standard
        extension, example route filter, to standard filter YANG model.</t>

		<t>Proprietary Extension to Standard YANG Model: As the Standard YANG Models
        contains a subset of all the Vendor Configuration Models, proprietary
        extensions must complement the Standard YANG Models to represent a Vendor
        Configuration Model.</t>

		<t>Proprietary YANG Model: A non Standard YANG Model.</t>

        <t>Vendor Configuration Model: It describes all configurable capabilities of
        the device and what device vendor exposes for configuration. The vendor
        configuration model can be CLI or YANG-based.</t>

	   </list></t>

	   <t>As mentioned earlier in this document, there are two ways of designing
		  models, top down and bottom up with one restriction. Everything is dependent
		  on the vendor data model. That model describes all the possibilities and if
		  model developers prefers, they can use vendor model only to design service
		  components, network service and business service. Using vendor model provides
		  all capabilities today, but it comes with restrictions of portability between
		  vendors and to certain extent devices.
		  On the other hand, only standard models and standard extensions can be used,
		  but this might result in less feature rich or less efficient services.
		  Service model developer has a choice to reuse service components or write
		  a model completely based on vendor data model.
		</t>

    <section anchor="standard" title="Standard YANG model">
      <t>With YANG we have a common language, that enables different
          communities to express data models that are widely understandable
          without lot of additional explanation. This enables different groups,
          such as IETF, to standardize data models, defined as an IETF RFC,
          and vendors to support them, which will make it easier to for network
          operators to manage their network configuration programmatically.
          The Standard YANG Models can distinguished between the core YANG models,
          such as the  YANG Data Model for Interface Management <xref target="RFC7223"/>,
          and the technology specific YANG models, such as the Configuration Data
          Model for the IP Flow Information Export (IPFIX) and Packet Sampling (PSAMP)
          Protocols <xref target="RFC6728"/>.
      </t>
    </section> <!-- standard -->

    <section anchor="standardextension" title="Standard Extension YANG Model">
      <t>Standard Extension is the conditional portion of a Standard YANG
      Model, expressed with the feature, if-feature, augment YANG
      statements <xref target="RFC6020"/>. An example of such standard
      extension is policy based routing (PBR). PBR is found in many vendor
      implementations and have many common features, but not all vendors
      support PBR on all of their devices.</t>
    </section> <!-- standardextension -->

	   <section anchor="proprietaryextensiontostandard" title="Proprietary Extension to Standard YANG Model">
       <t>Proprietary extension is a conditional portion of a Standard YANG
         Model, expressed with feature, if-feature, augment YANG statements
         <xref target="RFC6020"/>. Proprietary extensions are required as the
         Standard YANG model will not cover all the possible configuration
         parameters of the different vendors. Proprietary extension can be a feature
         depending on hardware platform capabilities and it is not available by
         other vendors. Such an example could be match condition for packet
         classification used for PBR.
		   </t>
     </section> <!-- proprietaryextensiontostandard -->

     <section anchor="vendor" title="Vendor configuration model">
       <t>Base model for all other models is the vendor configuration model.
         It describes all configurable capabilities of the device and what
         device vendor exposes for configuration.</t>

	      <t>The standard configuration model is a subset of vendor configuration
	      model. The standard configuration model can be broken into base model
	      and standard extension models, where the base is common data model and
	      standard extensions are standard features that are not implemented
		    by all vendors. Example of standard base model is Access
	      Control List and routing filter is a standard extension on ACL. Or
	      another example: encryption algorithm is standard feature, but the
	      different types, like md5, hmac-md5, hmac-sha1, etc are standard
	      extensions, as it is not that all vendors have all encryption
	      algorithm types implemented.</t>

		  <t>Although all vendors provide very similar functionality using
        standards, implementations are different. One of basic examples are
        dynamic routing protocols. We can see today two main types of routing
        protocol configuration.
        </t>
        <t><list style="empty">
          <t>protocol centric -  all the protocol related config is contained
            with the protocol itself. Especially in case of multiple instances
            of the routing protocol running in different routing-instances
            (routing-instance as described in core routing model <xref target="I-D.ietf-netmod-routing-cfg"/>),
            all the routing-instance protocol config is contained in the
            default routing instance.
          </t>
          </list>
        </t>
        <figure>
          <artwork>
            Router ospf 10
            Default-metric 100
            Address-family ipv4 vrf VRF1
                Network x.x.x.x area 0

            Address-family ipv4 vrf VRF2
                Network x.x.x.x area 0

            Address-family ipv4
                Network x.x.x.x area 1
          </artwork>
        </figure>
        <t><list style="empty">
          <t>In term of YANG model, the routing protocol configuration will be
            defined within the default routing-instance and the routing-protocol
            config will contain multiple instances referring to other
            routing-instances.
          </t>
          <t>VRF centric - All the protocol related config for a routing-instance
            is contained within this routing-instance.
          </t>
        </list></t>
        <figure>
            <artwork>
            Routing-instance VRF1 {
              Protocols isis {

              }
            }
            Routing-instance VRF2 {
              Protocols isis {

              }
            }
            </artwork>
          </figure>
          <t><list style="empty">
            <t>In terms of YANG model, the routing protocol configuration for a
              routing-instance will be defined within the associated
              routing-instance.
            </t>

			 <t>The bottom line message is that, even if YANG models are standardized,
			 they will provide different CLI outcomes, simply because the CLI among
			 vendors is not standardized.
            </t>
          </list>
        </t>
      </section> <!--vendor -->

	  <section anchor="proprietary" title="Proprietary YANG Model">
          <t>While waiting for the Standard YANG Models to be published,
            the different vendors might offer Proprietary YANG Models.
          </t>
      </section> <!-- proprietary -->

  </section> <!-- Second Dimension -->

  <section title="Typical Architecture">
    <figure align="center">
      <artwork align="center"> <![CDATA[
        +--------------------------------------------------------+
        |                      OSS/BSS                           |
        +--------------------------------------------------------+

        +--------------------------------------------------------+
        | Orchestrator                                           |
        |   +------------------------------------------------+   |
        |   | network service model                          |   |
        |   |                                                |   |
        |   +------------------------------------------------+   |
        +--------------------------------------------------------+

        +--------------------------------------------------------+
        | Network element                                        |
        |                             |                          |
        |  +-----------------------+  |  +-------------------+   |
        |  | Standard YANG model   |  |  |   Proprietary     |   |
        |  |                       |  |  |   YANG model      |   |
        |  +-----------------------+  |  |                   |   |
        |                             |  |                   |   |
        |  +-----------------------+  |  |                   |   |
        |  | Proprietary Extension |  |  |                   |   |
        |  | To YANG Standard      |  |  |                   |   |
        |  | Model                 |  |  |                   |   |
        |  +-----------------------+  |  +-------------------+   |
        |                             |                          |
        |  +-------------------------------------------------+   |
        |  |          Vendor Configuration Model             |   |
        |  +-------------------------------------------------+   |
        +--------------------------------------------------------+

                        Fig. 2 Typical Architecture


    ]]></artwork>
    </figure>
 	 <t>The OSS/BSS may contains business related models. Those models, which
     may or may not be written in YANG, are outside the scope of the IETF work</t>

  </section> <!-- Typical Architecture -->

  <section title="IETF, Other SDOs, and open source">
	 <t>IETF, as a standard defining organization (SDO), is well positioned to
   standardize Network Element YANG models. With a wide range of expertise
   found within its working groups focused on those technology definitions. As IETF
   participants implement those protocols, they have deep expertise about
   the implementation and finding a common base standard configuration model
   between vendors should be a very viable goal.
	 </t>

   <t>In some situation where the protocols are standardized by different SDOs,
	 those SDOs should be responsible for its YANG data modeling effort.
	 For example, the IETF has transferred the responsibility for some IEEE
	 technology-related MIB modules to the IEEE 802.1 and 802.3 Working Group
	 <xref target="RFC4663"/>, <xref target="RFC7448"/>. Similarly, the IEEE
	 should be responsible for similar YANG data modeling efforts.
	 </t>
   <t>Developing Network Service YANG Models requires network operations expertise.
   When those operators participate in IETF work, the right working group can be
   formed, and those Service YANG Models can be developed within IETF.
   However, some other groups, like Metro Ethernet Forum or CableLabs, could
   be better positioned for service modeling related to their area of expertise.</t>

   <t>Today there are many open source projects and some of them are becoming
     de facto standards, like the Linux kernel. Many such open source projects,
     like Open Daylight, OpenStack, etc, are doing very good work and their
     work is being accepted and deployed in production environments. They bring
     a lot of very valuable experience to other groups. From IETF perspective,
     if there is such a work present, it can be used as a very good starting
     point for modeling within IETF.
   </t>

  </section> <!-- IETF, Other SDOs, open source -->

  <section anchor="security" title="Security Considerations">
    <t>At this stage, authors of the draft didn't look into security considerations.</t>
  </section> <!-- security -->

  <section anchor="iana" title="IANA Considerations">
    <t>This document requests no action by IANA. </t>
  </section> <!-- iana -->

  <section anchor="ack" title="Acknowledgements">
    <t>Thanks to David Ball for his enlightenments on Metro Ethernet Forum service aspects.</t>
  </section> <!-- ack -->

  <section anchor ="changes" title="Change log [RFC Editor: Please remove]">
    <t>version 1: restructure the document, add the two dimensions, add the interaction with the different
	SDOs and opensource projects, add the definitions.</t>
    <t>version 2: added definitions for config and service models
        clarified second dimension of model classification.
        fixed typos
    </t>
    </section> <!-- changes -->
  </middle>

  <back>
	    <references title="Normative References">
		  <?rfc include='reference.RFC.6020'?>
	   </references>
	   <references title="Informative References">
      <?rfc include='reference.RFC.4663'?>
		  <?rfc include='reference.RFC.6241'?>
		  <?rfc include='reference.RFC.6728'?>
		  <?rfc include='reference.RFC.7223'?>
		  <?rfc include='reference.RFC.7448'?>
		  <?rfc include='reference.I-D.ietf-netmod-routing-cfg'?>
      <?rfc include='reference.I-D.ietf-isis-yang-isis-cfg'?>
      <?rfc include='reference.I-D.ietf-netmod-acl-model'?>
      <?rfc include='reference.I-D.ietf-ospf-yang'?>
	    <reference anchor="Writable-MIB-Module-IESG-Statement" target="https://www.ietf.org/iesg/statement/writable-mib-module.html">
            <front>
              <title>Writable MIB Module IESG Statement</title>
              <author/>
              <date/>
            </front>
           </reference>
	  </references>
  </back>
</rfc>
