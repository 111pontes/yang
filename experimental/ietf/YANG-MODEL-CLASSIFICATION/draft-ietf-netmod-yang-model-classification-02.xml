<?xml version="1.0" encoding="UTF-8"?>

<!-- This is built from a template for a generic Internet Draft. Suggestions for
     improvement welcome - write to Brian Carpenter, brian.e.carpenter @ gmail.com -->

<!-- This can be converted using the Web service at http://xml.resource.org/experimental.html
     (which supports the latest, sometimes undocumented and under-tested, features.) -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>            <!-- You want a table of contents -->
<?rfc symrefs="yes"?>        <!-- Use symbolic labels for references -->
<?rfc sortrefs="yes"?>       <!-- This sorts the references -->
<?rfc iprnotified="no" ?>    <!-- Change to "yes" if someone has disclosed IPR for the draft -->
<?rfc compact="yes"?>

<!-- This defines the specific filename and version number of your draft (and inserts the appropriate IETF boilerplate -->
<rfc ipr="trust200902" docName="draft-ietf-netmod-yang-model-classification-01" category="info"  >

<front>
  <title abbrev="YANG Data Model Classification">YANG Data Model Classification</title>

  <author fullname="Dean Bogdanovic" initials="D." surname="Bogdanovic">
    <organization abbrev="Volta Networks, Inc.">
	Volta Networks, Inc.
    </organization>
    <address>
      <email>dean@voltanet.io</email>
    </address>
  </author>

  <author initials="B." surname="Claise" fullname="Benoit Claise">
    <organization abbrev="Cisco Systems, Inc.">
	Cisco Systems, Inc.
    </organization>
    <address>
      <postal>
        <street>De Kleetlaan 6a b1</street>
        <city>1831 Diegem</city>
        <country>Belgium</country>
      </postal>
      <phone>+32 2 704 5622</phone>
      <email>bclaise@cisco.com</email>
    </address>
  </author>

  <author fullname="Carl Moberg" initials="C." surname="Moberg">
    <organization>Cisco Systems, Inc.</organization>
    <address>
      <email>camoberg@cisco.com</email>
    </address>
  </author>

  <!-- Let xml2rfc figure out the date -->
  <date/>

  <area>Operations and Management</area>
  <workgroup>NETMOD</workgroup>

  <abstract>
    <t>The YANG <xref target="RFC6020"/> data modeling language is currently
      being considered for a wide variety of applications throughout the
      networking industry at large. Many standards-defining organizations
      (SDOs), open source software projects, vendors and users are using YANG to
      develop and publish data models of configuration, state data and operations
      for a wide variety of applications. At the same time, there is currently
      no well-known terminology to categorize various types of YANG data models.</t>

    <t>A consistent terminology would help with the categorization of YANG data models,
      assist in the analysis the YANG data modeling efforts in the IETF and
      other organizations, and bring clarity to the YANG-related discussions
      between the different groups.</t>

    <t>This document describes a set of concepts and associated terms to
      support consistent classification of YANG data models.</t>
  </abstract>
</front>

<middle>
  <section anchor="introduction" title="Introduction">
    <t>The Internet Engineering Steering Group (IESG) has been actively
      encouraging IETF working groups to use the YANG <xref target="RFC6020"/> 
      <xref target='I-D.ietf-netmod-rfc6020bis'/> and NETCONF
      <xref target="RFC6241"/> and YANG standards for configuration
      management purposes, especially in new working group charters
      <xref target="Writable-MIB-Module-IESG-Statement"/>.</t>

    <t>YANG is also gaining wide acceptance as the de-facto standard modeling
      language in the broader industry. This extends beyond the IETF,
      including many standards development organizations, industry consortia,
      ad hoc groups, open source projects, vendors, and end-users.</t>

    <t>There are currently no clear guidelines on how to classify the layering
      of YANG data models according to abstraction, or how to classify those models along
      the continuum spanning formal standards publications, vendor-specific
      models and models provided by end-users.</t>

    <t>This document presents a set of concepts and terms to form a useful
      taxonomy for consistent classification of YANG data models in two dimensions:
      <list style="symbols">
        <t>The layering of data models based on their abstraction levels</t>
        <t>The type of data model based on the nature and intent of the content</t>
      </list>
      The two categories are covered in the next two sections.
    </t>
    <section anchor="terminology" title="Terminology">
      <t>RFC6020bis  <xref target='I-D.ietf-netmod-rfc6020bis'/> specifies:
        <list style="symbols">
          <t>data model: A data model describes how data is represented and
            accessed.</t>
          <t>module: A YANG module defines a hierarchy of schema nodes.  With
            its definitions and the definitions it imports or includes from
            elsewhere, a module is self-contained and "compilable".</t>
        </list>
      </t>
    
      <t>A consistent terminology would help with the categorization of YANG
        data models, assist in the analysis the YANG data modeling efforts in
   	the IETF and other organizations, and bring clarity to the YANG-
   	related discussions between the different groups.

   	Throughout this document, the YANG data model term is used, in order
   	to simplify the communication between the difference audiences of
   	this document. Ex: the IETF mainly works on Network Element YANG data 
        models, the IETF L3VPN Working Group works on a Service YANG data model,
        the IEEE works on a Network Elements YANG data models for IEEE-related 
        technologies. There are YANG data models that are published as documents,
        for example in the IETF, and those YANG data models are delivered as 
        YANG modules (each with its own file name and identifier).</t>
    </section>
  </section>

  <section anchor="firstdimension" title="First Dimension: YANG Data Model Abstraction Layers">
    <t>Model developers have taken two approaches to developing YANG data models:
      top-down and bottom-up. The top-down approach starts with high level
      abstractions modeling business or customer requirements and maps them to
      specific networking technologies. The bottom-up approach starts with
      fundamental networking technologies and maps them into more abstract
      constructs.</t>

	  <t>There are currently no specific requirements on, or well-defined best
      practices around the development of data models. For the purpose of this
      document we assume that both approaches (bottom-up and top-down) will
      be used as they both provide benefits that appeal to different groups.
    </t>

	  <t>For layering purposes, this document suggests the classification of
      data models into two distinct abstraction layers:</t>
	   <t>
       <list style="symbols">
		     <t>Network Element YANG Data Models describe the configuration, state
          data and operations of specific device-centric technologies or
          features</t>
         <t>Network Service YANG Data Models describe the configuration, state
          data and operations of an abstract representation of a service
          implemented on one or multiple network elements</t>
	      </list>
      </t>

	   <t>Figure 1 illustrates the application of YANG data models at different
      layers of abstraction. Layering of data models allows for reusability of
      existing lower layer models by higher level models while limiting
      duplication of features across layers.</t>

    <t>For model developers, per-layer modeling allows for separation of
      concern across editing teams focusing on specific areas.</t>

    <t>As an example, experience from the IETF shows that creating useful
      network element YANG data models for e.g. routing or switching protocols
      requires teams that include developers with experience of
      implementing those protocols.</t>

    <t>On the other hand, network service YANG data models are best developed by 
      network operators experienced in defining network services for consumption by
      programmers developing e.g. flow-through provisioning systems or self-service
      portals.</t>

	<figure align="center">
    <artwork align="center"><![CDATA[

                  +--------------------------+
                  |  Operations and Business |
                  |      Support Systems     |
                  |        (OSS/BSS)         |
                  +--------------------------+

  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  Network Service YANG data models 

       +------------+      +-------------+      +-------------+
       |            |      |             |      |             |
       |  - L2VPN   |      |   - L2VPN   |      |    L3VPN    |
       |  - VPWS    |      |   - VPLS    |      |             |
       |            |      |             |      |             |
       +------------+      +-------------+      +-------------+
  
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  Network Element YANG data models

  +------------+  +------------+  +-------------+  +------------+
  |            |  |            |  |             |  |            |
  |    MPLS    |  |    BGP     |  | IPv4 & IPv6 |  |  Ethernet  |
  |            |  |            |  |             |  |            |
  +------------+  +------------+  +-------------+  +------------+

  Fig. 1 YANG Data Model Layers
  L2VPN: Layer 2 Virtual Private Network
  L3VPN: Layer 3 Virtual Private Network
  VPWS: Virtual Private Wire Service
  VPLS: Virtual Private LAN Service

]]></artwork>
    </figure>

  <section anchor="networkservice" title="Network Service YANG Data Models">
    <t>Network Service YANG Data Models describe the characteristics of a
      service, as agreed upon with consumers of that service. That is, a
      service model does not expose the detailed configuration parameters of
      all participating network elements and features, but describes an
      abstract model that allows instances of the service to be decomposed
      into instance data according to the Network Element data models of
      the participating network elements. The service-to-element decomposition
      is a separate process with details depending on how the network operator
      chooses to realize the service. For the purpose of this document we
      will use the term "orchestrator" to describe a system implementing such
      a process.</t>

     <t>As an example, the Network Service YANG data model included in
      <xref target='YANG-Data-Model-for-L3VPN-service-delivery'/> provides
      an abstracted model for Layer 3 IP VPN service configuration. An
      orchestrator receives operations on service instances according to the
      service model and decomposes the data into specific Network Element
      data models to configure the participating network elements to perform the
      intent of the service.</t>

     <t>So one criteria that distinguish the Network Service YANG Data Models 
      from the Network Element YANG data model is that Network Service YANG 
      Data Models describe the whole network service. For example, if a VPN 
      service YANG data model describes which two endpoints need be connected 
      together, it is Network Service YANG Data Model, while, if the YANG data
      model describes the external connectivity of each device, it is a 
      Network Element YANG data model.</t>

     <t>Network Service YANG data models define services models to be consumed 
      by external systems. These models are commonly designed, developed and
      deployed by network infrastructure teams.</t>

    <t>YANG allows for different design patterns to describe network services,
      ranging from monolithic to component-based approaches.</t>

    <t>The monolithic approach captures the entire service in a single model
      and does not put focus on reusability of internal data definitions and
      groupings. The monolithic approach has the advantages of single-purpose
      development including speed at the expense of reusability.</t>

    <t>The component-based approach captures device-centric features (e.g.
      the definition of a VRF, routing protocols, or packet filtering) in a
      vendor-independent manner. The components are designed for reuse across
      many services. The set of components required for a specific service is
      then composed into the higher-level service. The component-based
      approach has the advantages of modular development including a higher
      degree of reusability at the expense of initial speed.</t>

    <t>As an example, an L2VPN service can be built on many different types of
      transport network technologies, including e.g. MPLS or carrier ethernet.
      A component-based approach would allow for reuse of e.g. UNI-interface
      definitions independent of the underlying transport network (e.g. MEF
      UNI interface or MPLS interface). The monolithic approach would assume
      a specific set of transport technologies and interface definitions.</t>

    </section>

   <section anchor="networkelement" title="Network Element YANG Data Models">
    <t>Network Element YANG Data Models describe the configuration, state
      data and operations of a network device as defined by the vendor of
      that device. The models are commonly structured around features of the
      device, e.g. interface configuration <xref target='RFC7223'/>, OSPF
      configuration <xref target='I-D.ietf-ospf-yang'/>, and firewall rules
      definitions  <xref target='I-D.ietf-netmod-acl-model'/>.</t>

    <t>The data model provides a coherent data model representation of what is 
      commonly a very mixed software environment consisting of the operating 
      system and applications running on the device.  The decomposition, 
      ordering, and execution of changes to the operating system and application 
      configuration is the task of the management framework that implements the 
      YANG data model.</t>

   </section>
 </section>

 <section title="Second Dimension: Model Types">
    <t>This document suggests classifying YANG data model types as either standard
      YANG data models, vendor-specific YANG data models and extensions, and
      user-specific YANG data models and extensions</t>

    <t>The suggested classification applies to both Network Element YANG Data
      Models and Network Service YANG Data Models.</t>

    <t>It is to be expected that real-world implementations of both Network
      Service and Network Element YNAG data models will include a mix of all three types
      of models.</t>

    <section title="Standard YANG Data Models">
      <t>Standard YANG data models are published by standards-defining organizations
        (SDOs). While there is no formal definition of what construes an SDO,
        a common feature is that they publish specifications along specific
        processes with content that reflects some sort of membership
        consensus. The specifications are developed for wide use among the
        membership or for audiences beyond that.</t>

      <t>The lifecycle of these models is driven by the editing cycle of the
        specification and not tied to a specific implementation.</t>

      <t>Examples of SDOs in the networking industry are the IETF, the IEEE 
         (Institute of Electrical and Electronics Engineers) and the MEF.</t>
    </section>

    <section title="Vendor-specific YANG Data Models and Extensions">
      <t>Vendor-specific YANG data models are developed by organizations with the
        intent to support a specific set of implementations under control of
        that organization. The intent of these models range from providing
        openly published YANG data models that may eventually be contributed back
        to, or adopted by an SDO, to strictly internal YANG data models not intended
        for external consumption.</t>

      <t>The lifecycle of these data models are generally aligned with the release
        cycle of the product or open source software project deliverables.</t>

      <t>It is worth noting that there is an increasing amount of interaction
        between open source projects and SDOs in the networking industry. This
        includes open source projects implementing published standards as well
        as open source projects  contributing content to SDO processes.</t>

      <t>Vendors also develop Vendor-specific Extensions to standard data models using
        YANG constructs for extending data definitions of previously published
        data models. This is done using the ‘augment’ statement that allows locally
        defined data trees to be augmented into locations in externally defined
        data trees.</t>

      <t>Vendors use this to extend standard data models to cover the
        full scope of features in implementations, which commonly is broader
        than what is covered by the standard data model.</t>
    </section>

    <section title="User-specific YANG Data Models and Extensions">
      <t>User-specific YANG data models are developed by organizations that operate
        YANG-based infrastructure including devices and orchestrators. The
        intent of these models is to express the specific needs for a certain
        implementation, above and beyond what is provided by vendors.
      </t>

      <t>This data model type obviously requires the infrastructure to support the
        introduction of user-provided data models and extensions. This would include
        ability to describe the service-to-network decomposition in
        orchestrators and the model to configuration decomposition in devices.
      </t>

      <t>The lifecycle of these data models are generally aligned with the change
        cadence of the infrastructure.</t>
    </section>
</section>

<section anchor="catalog" title="Adding The Classification Type to YANG Module Catalogs">
   <t>The suggested classification in this document would be an useful information in
   a catalog of YANG modules. Such catalog allows for easy lookup and reusability of YANG modules. 
   Practically, the YANG module classification type would be an additional leaf to YANG module
   specified in <xref target='I-D.openconfig-netmod-model-catalog'/>:</t> 

        <figure align="center">
    <artwork align="center"><![CDATA[
         leaf module-class{
           type enum {
                service
                device
                notApplicable
           }
           description
              "Categorization of the YANG module based on 
               draft-ietf-netmod-yang-model-classification.";
         }
]]></artwork>
    </figure>

   <t>Note: this leaf should actually be moved to <xref target='I-D.openconfig-netmod-model-catalog'/>.
      Note2: since a YANG module can belong to both service and device, the ENUM is not appropriate.
      A extensible list of module type is more appropriate.</t>

   <t>Indeed, without inspecting the YANG module itself, it's difficult to determine 
    whether its type is a network service or a network element. The YANG module name
    might provide some useful information but is not a definite answer.</t>
</section>
    
<section anchor="security" title="Security Considerations">
    <t>This document doesn't have any Security Considerations".</t>
</section>

<section anchor="iana" title="IANA Considerations">
    <t>This document has no IANA actions.</t>
</section>

<section anchor="ack" title="Acknowledgements">
    <t>Thanks to David Ball and David Hansford for feedback and suggestions.</t>
</section>

<section anchor ="changes" title="Change log [RFC Editor: Please remove]">
    <t>version 00: Renamed and small fixes based on WG feedback.</t>
    <t>version 01: Language fixes, collapsing of vendor data models and extensions,
      and the introduction of user data models and extensions.</t>
    <t>version 02: Updated the YANG Module Catalog section, terminology alignment 
      (YANG data model versus YANG module), epxlain better the distinction between 
      the Network Element and Service YANG data models even if sometimes there are 
      grey areas, editorial pass.</t>
</section>
  </middle>

  <back>
    <references title="Normative References">
        <?rfc include='reference.RFC.6020'?>
    </references>
    <references title="Informative References">
       <?rfc include='reference.RFC.6241'?>
       <?rfc include='reference.RFC.7223'?>
       <?rfc include='reference.I-D.ietf-netmod-rfc6020bis'?>
       <?rfc include='reference.I-D.ietf-netmod-acl-model'?>
       <?rfc include='reference.I-D.ietf-ospf-yang'?>
       <?rfc include='reference.I-D.openconfig-netmod-model-catalog'?>
      <reference anchor="Writable-MIB-Module-IESG-Statement"
        target="https://www.ietf.org/iesg/statement/writable-mib-module.html">
        <front>
          <title>Writable MIB Module IESG Statement</title>
          <author/>
          <date/>
        </front>
      </reference>
      <reference anchor="YANG-Data-Model-for-L3VPN-service-delivery"
        target="https://tools.ietf.org/id/draft-l3vpn-service-yang">
        <front>
          <title>YANG Data Model for L3VPN service delivery</title>
          <author/>
          <date/>
        </front>
      </reference>
    </references>
  </back>
</rfc>
